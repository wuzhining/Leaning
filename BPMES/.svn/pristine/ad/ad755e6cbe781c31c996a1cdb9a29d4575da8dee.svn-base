// JavaScript Document
$(function(){

	topoleft = $(".topoleft");
	var WP={};
	var Line1={
            url: "/iPlant_ajax",
            dataType: "JSON",
            async:false,
            data: {IFS: "ACT0023"},
            successCallBack:function(data){
               	 //加载列表
               	 var dataList,childData=[],str;
               	 if(data.RESPONSE.length>0){
               		dataList =  data.RESPONSE[0].RESPONSE_DATA;
               		console.log(dataList);
               		if(dataList.length>0){
               			$.each(dataList, function(i, item){
               				console.log(item.wp_type);
               					str="<div  id='hide' name='box'>"+item.WP_TYPE+"</div> <div class='lefticon' style='display:none' id='"+item.WP_TYPE+"'> </div>";
               					topoleft.append(str); // 添加Html内容，不能用Text 或 Val
               					 WP={
               				            url: "/iPlant_ajax",
               				            dataType: "JSON",
               				            async:false,
               				            data: {WP_TYPE:item.WP_TYPE,IFS: "ACT0021"},
               				            successCallBack:function(data){
               				               	 //加载列表
               				               	 var dataList,childData=[],str;
               				               	 if(data.RESPONSE.length>0){
               				               		dataList =  data.RESPONSE[0].RESPONSE_DATA;
               				               		console.log(dataList);
               				               		if(dataList.length>0){
               				               			$.each(dataList, function(i, item){
               				               			appendTo = $("#"+item.WP_TYPE+"");
               				               				console.log(item.wp_type);
               				               			str="<div class='iconitems'  icontype='uiscreen'  id='"+item.WP_CD+"'> <img src='images/little-icon/screen.gif' /> <span>"+item.WP_NM+"</span></div>";
               				               			appendTo.append(str); // 添加Html内容，不能用Text 或 Val
               				               			});
               				           			}
               				               	 }
               				               	
               				            }
               				       };

               					iplantAjaxRequest(WP);
               			});
           			}
               	 }
               	
            }
       };
		iplantAjaxRequest(Line1);
	//-------------------编辑(start)-------------------
	var topocontent = $('#topocontent'),
		lefticon = $('.lefticon'),
		linewrap = $('#linewrap');
	
	//连接样式
	// 多条线
//	var lineColorArr = ['#b267ce', '#7c4f2e', '#0074b0', '#b02929', '#e28b1a', '#48daff', '#61b7cf', '#2f8e00',"#000","#ccc"],
//    relationArr = ['文档', '使用', '冷备', '热备', '依赖', '父子', '安装在...上', '连接','pass','Fail'],

	
	var lineColorArr = ["#000","#ccc"],
	    relationArr = ['Pass','Fail'],
	    instance = jsPlumb.getInstance({
			Endpoint : ["Dot", {radius:2}],
			ConnectionOverlays : [
				[ "Arrow", {location: 1, id:"arrow", length:10, foldback:0.8, width: 10} ],
				[ "Label", { label:"关系", id:"label", cssClass:"labelstyle" }]
			],
			DragOptions : { zIndex:2000 },
			Container:"topocontent"
		});
	window.jsp = instance;
	
	var labelTxt = relationArr[0],			//默认线条文字
	    lineColor = lineColorArr[0],		//默认线条颜色
	    pstyle = {
			Endpoint: ["Dot", { radius: 2 }],
			paintStyle: {
				strokeStyle: lineColor,
				fillStyle: lineColor
			},
			connector: ["Flowchart", {stub: [0, 0], gap: 2, cornerRadius: 5, alwaysRespectStubs: true }],
			connectorStyle: {
				lineWidth: 1,
				strokeStyle: lineColor
			},
			maxConnections: -1
		};
	
	//加载已有数据
//	topocontent.load('json/connection.json', function(response, status){
//	    if(status == "success"){
//			$.closePop('loadingPop');
//			editData(response);
//		}else{
//		    $.popupEle('loadingPop');
//		}
//	});
	function editData(response){
	    var list = eval(response.split('&')[0]),
			blocks = eval(response.split('&')[1]),
			htmlText = "",
			conn = "";
		//------------插入元素-------------
		for( var i in blocks){
			var viewstyle = 'left:'+blocks[i].BlockX+'px;top:'+blocks[i].BlockY+'px;',
				viewid = blocks[i].BlockId,
				viewClass = blocks[i].BlockClass,
				viewsrc = blocks[i].BlockImg,
				viewTxt = blocks[i].BlockText;
			htmlText = htmlText + '<div class="elebox '+viewClass+'" id='+viewid+' style='+viewstyle+'><img src='+viewsrc+'><span class="dragPoint">'+viewTxt+'</span></div>';
		};
		topocontent.html(htmlText);
		
		//------------默认连接-------------
		var windowsDrag = jsPlumb.getSelector("#topocontent .elebox");
		renderConnect(windowsDrag);
		
		//------------更改样式-------------
		for( var i in list){
			var conor = instance.connect({ source: list[i].PageSourceId, target:list[i].PageTargetId});
			conor.getOverlay("label").setLabel(list[i].connectionLabel);
			conor.setPaintStyle({fillStyle : list[i].lineColor, strokeStyle: list[i].lineColor});
			conor.bind('click',function(){
				detachLine(this);
			});
		};
		$("div.elebox").draggable({ containment: "parent" });
	}
	
	//自定义鼠标事件
	var rightkeyPop = $('#rightkeyPop'),
		relationWrap = $('#relationWrap'),
		relevanceBox = $('#relevanceBox'),
	    delEle = $('#delEle');
	
	linewrap.find('span').each(function(i) {//点解切换关系
		var $this = $(this);
		$this.click(function(){
			linewrap.find('span').removeClass('focus');
			$this.addClass('focus');
			labelTxt = relationArr[i];
			lineColor = lineColorArr[i];
		});
	});
	$(document).on("contextmenu", function() { return false; }); 
	$(document).on('mousedown', '#topocontent div.elebox', function(event){
        if(event.which == 3){
		    var $this = $(this),
			    event = event || window.event,
			    oLeft = parseInt(event.clientX),
				oTop = parseInt(event.clientY),
				span = $this.children('span'),
				idStr = $this.attr('id');
			rightkeyPop.css({left : oLeft, top : oTop, zIndex : 2999}).attr('rightkey_click_id', idStr).show();
		}
	});
	$(document).on('mouseout', '#topocontent div.elebox', function(){
		rightkeyPop.hide();
	});
	$(document).on('mouseover', '#topocontent div.elebox', function(){
		return false;
	});
	$(document).on('click', '#delEle', function(){
		idStr = rightkeyPop.attr('rightkey_click_id');
	    $.confirmInfo({
			title : '删除元素及链接',
			text : '确认删除此元素及其链接吗？',
			sure : function(){
				instance.removeAllEndpoints(idStr);
				instance.remove(idStr);
			}
		});
	});

    $(document).on('click', '#ReName', function(){
    	var name=prompt("编辑","");
    	 var  idStr = rightkeyPop.attr('rightkey_click_id');
		$('#' + idStr).children('span').text(name);
		relationWrap.hide();
		rightkeyPop.hide();
		instance.revalidate(idStr);
		});
    
//	$(document).on('click', '#relationWrap a', function(){
//	    var txt = $(this).text(),
//		    idStr = rightkeyPop.attr('rightkey_click_id');
//		$('#' + idStr).children('span').text(txt);
//		relationWrap.hide();
//		rightkeyPop.hide();
//		instance.revalidate(idStr);
//	});
	rightkeyPop.mouseover(function(){
		$(this).show();
		return false;
	});
	relevanceBox.hover(function(){
	    relationWrap.show();
	}, function(){
	    relationWrap.hide();
	});
	$('body').mouseover(function(){
	    rightkeyPop.hide();
	});
	
	//jsPlumb事件
	/*instance.bind("click", function(info) {//点解连接线删除连接（bug,点击endpoint也能删除，但是点击label能提示不能删除）
	    detachLine(info);
	});*/
	instance.bind("connection", function(info) {//更改label关系
		info.connection.getOverlay("label").setLabel(labelTxt);
	});
	instance.bind("connectionDrag", function(info) {//更改连接链颜色
		info.setPaintStyle({fillStyle : lineColor, strokeStyle: lineColor});
	});
	instance.bind("connectionDragStop", function(info) {//点击连接线、overlay、label提示删除连线 + 不能以自己作为目标元素
	    if(info.sourceId == info.targetId){
			$.popupTips('不能以自己作为目标元素');
		    instance.detach(info); 
		}else{
			info.unbind('click');
			info.bind('click',function(){
				detachLine(info);
			});
		};
	});
	function detachLine(info){//删除连接
	    $.confirmInfo({
			title : '删除连接',
			text : '确认删除此链接吗？',
			sure : function(){
			   instance.detach(info); 
			}
		});
	}
	function renderConnect(newid){//渲染
		instance.draggable(newid);
		instance.doWhileSuspended(function(){
			var isFilterSupported = instance.isDragFilterSupported();
			if(isFilterSupported){
				instance.makeSource(newid, {filter:".dragPoint",anchor:"Continuous"}, pstyle);
			}else{
				var eps = jsPlumb.getSelector(".dragPoint");
				for (var i = 0; i < eps.length; i++) {
					var e = eps[i], p = e.parentNode;
					instance.makeSource(e, {parent:p, anchor:"Continuous"}, pstyle);
				}
			}
		});
		instance.makeTarget(newid, {dropOptions:{hoverClass:"dragHover"}, anchor:"Continuous"}, pstyle);
	}
	
	//拖动创建元素
    lefticon.children('div.iconitems').draggable({
	    helper: 'clone',
		scope: 'topo'
	});
	topocontent.droppable({
	    scope: 'topo',
		drop: function(event, ui){
			//获取基本元素与参数
			var $this = $(this),
				dragui = ui.draggable,
				fatop = parseInt($this.offset().top),
				faleft = parseInt($this.offset().left),
				uitop = parseInt(ui.offset.top),
				uileft = parseInt(ui.offset.left),
				imgsrc = dragui.children('img').attr('src'),
				spantxt = dragui.children('span').text(),
//				uid = dragui.attr('icontype'),  
				uid = dragui.attr('id'), 	//获取id的方法
				alluid = topocontent.children('div.' + uid);
			
			//ID计算
			var allicon = alluid.length,
				idnum = 0,
				idArr  = new Array;
			alluid.each(function(i) {
				idArr.push(parseInt($(this).attr('id').split('_')[1]));
			});
			idArr.sort(function(a,b){return a>b?1:-1});
			for(i = 0; i < allicon; i++){
			   var idArrOne = parseInt(idArr[i]);
				if(i != idArrOne){
					idnum = idArrOne - 1;
					break;
				}else{
					idnum = allicon;
				} 
			}
			
			//判断当前图是否已存在
			if(idnum >= 1){
			    $.popupTips('只能存在一个');
			    return;
			}
			//插入元素组织
		    var newstyle = 'left:' + (uileft - faleft) + 'px;top:' + (uitop - fatop) + 'px',
				newid = uid + '_' + idnum,
				newsrc = imgsrc.replace('little-icon', 'big-icon'),
//				str = '<div class="elebox '+uid+'" id='+newid+' style='+newstyle+'><img src='+newsrc+'><span class="dragPoint">'+spantxt+'</span></div>';
		    str = '<div class="elebox '+uid+'" id='+newid+' style='+newstyle+'><img src='+newsrc+'><span class="dragPoint">'+spantxt+'</span></div>';
			
			$this.append(str);
			renderConnect(newid);
			instance.revalidate(newid);
			$("#" + newid).draggable({ containment: "parent" });
		}
	});
	//-------------------编辑(end)-------------------
	
	//创建流程图方法
	savaCrafts_flow = function(cd,nm) {
		var count;
		var reqData={
				url: '/iPlant_ajax',
				dataType: 'JSON',
				async:false,
				data: {
				FLOW_CD:cd,
				FLOW_NM:nm,
				IFS:'ACT0024'
		},successCallBack: function(data) {
			var susMsg=getReturnMsg(data);
			var msg_text=data.RESPONSE[0].RESPONSE_HDR.MSG_TEXT;
			if(susMsg=="保存成功"){
				count= 1;
				$.popupTips(susMsg);
				return count;
			}
			else if(susMsg=="流程创建失败!"){
	        	count= 0;
	        	$.popupTips(msg_text);
	        	return count;
			}
			else{
				count= 1;
				$.popupTips(susMsg);
			}
		}
		};
		iplantAjaxRequest(reqData);
		return count;
	};
	
	sel_FlowID=function(cd,nm){
		var number=0;
		var reqData={
                url: "/iPlant_ajax",
                dataType: "JSON",
                async:false,
                data: {
    				FLOW_CD:cd,
    				FLOW_NM:nm,
    				IFS:'ACT0026'
    		},
    		
                successCallBack: function(a) {
                	dataTmp = [];
                	var op = a.RESPONSE[0].RESPONSE_DATA;
                    $.each(op,function(n,obj) {
                    	number =obj.FLOW_ID;
				    });
                },
                errorCallBack: function() {
                    $.popupTips('请联系管理员，查询失败！');
                }
            };
		iplantAjaxRequest(reqData);
		return number;
	};
	
	//-------------------保存(start)-------------------
	var saveTopoBtn = $('#saveTopoBtn'),
		serliza = '';
	
	saveTopoBtn.click(function(){
		
		
		
//		var connects = [];
//		$.each(instance.getAllConnections(), function (idx, connection) {
//			connects.push({
//				lineColor: connection.getPaintStyle('label').fillStyle,
//				connectionLabel : connection.getOverlay('label').label,
//				PageSourceId: connection.sourceId,
//				PageTargetId: connection.targetId
//			});
//		});
//		var blocks = [];
//		//流程表数据
//		$("#topocontent .elebox").each(function (idx, elem) {
//			var $elem = $(elem);
//			blocks.push({
//				BlockId: $elem.attr('id'),
//				BlockClass: $elem.attr('class').split(' ')[1],
//				BlockImg: $elem.children('img').attr('src'),
//				BlockText: $elem.children('span').text(),
//				BlockX: parseInt($elem.css("left")),
//				BlockY: parseInt($elem.css("top"))
//			});
//		});
		
		
		
//		console.log(JSON.stringify(connects));
//		console.log("--------------------------");
//		console.log(JSON.stringify(blocks));
//		serliza = JSON.stringify(connects) + "&" + JSON.stringify(blocks);
		
		function clean(){
			 $("#txtflow_NM").val("");
			 $("#txtflow_CD").val("");
		}
		if(topocontent.children('div.elebox').length == 0){
		    $.popupTips('请先创建元素或连接');
		}else{
			var txtflow_NM=$("#txtflow_NM").val();
			var txtflow_CD=$("#txtflow_CD").val();
			if(txtflow_NM==''){
				$.popupTips('流程名称不能为空！');
				return;
			}
			if(txtflow_CD==''){
				$.popupTips('流程编码不能为空！');
				return;
			}
			var flagF =savaCrafts_flow(txtflow_CD,txtflow_NM);
			if(flagF==1){
				var a =sel_FlowID(txtflow_CD,txtflow_NM);
				//流程线数据
				var connects  =new Array(), connect = {};
				$.each(instance.getAllConnections(), function (idx, connection) {
					connect = {};
					var source=connection.sourceId;
					var target=connection.targetId;
					connect.LINECOLOR= connection.getPaintStyle('label').fillStyle;
					connect.FLOW_ID=a;
					connect.FLOW_CD=txtflow_CD;
					connect.P_F = connection.getOverlay('label').label;
					connect.SOURCE_CD= source.slice(0,-2);
					connect.TARGET_CD= target.slice(0,-2);
					connects.push(connect);
				});
				
				var blocks = [];
				//流程表数据
				$("#topocontent .elebox").each(function (idx, elem) {
					var $elem = $(elem);
					blocks.push({
						WP_CD: $elem.attr('class').split(' ')[1],
						FLOW_ID:a,
						BLOCKX: parseInt($elem.css("left")),
						BLOCKY: parseInt($elem.css("top")),
						FLOW_CD:txtflow_CD
					});
				});
				
				
				if(a>=1){
					//流程表数据
					console.log(JSON.stringify(blocks));
					var reqData={
							url: '/iPlant_ajax',
							dataType: 'JSON',
							async:false,
							data: {
							list:blocks,
							IFS:'ACT0022'
					}
					};
					var reqData2={
							url: '/iPlant_ajax',
							dataType: 'JSON',
							async:false,
							data: {
							list:connects,
							IFS:'ACT0025'
					}
					};
					iplantAjaxRequest(reqData);
					iplantAjaxRequest(reqData2);
					$.popupTips('流程图已保存');
					clean();
				}
			}
			else{
				$.popupTips('流程图保存失败!');
			}
//			console.log(a);
//		    $.popupTips('流程图已保存');
		}

//		$('#num').text(serliza);
//		console.log(JSON.stringify(connects));
//		console.log("--------------------------");
//		console.log(JSON.stringify(blocks));
//		console.log("--------------------------");
//		console.log(serliza);

	});
	//-------------------保存(end)-------------------
	
	
	//-------------------预览(start)-------------------
//	var topoView = $('#topoView'),
//	    viewTopoBtn = $('#viewTopoBtn');
	$('#viewTopoBtn').click(function(){
	    $.iframePop('topo-view.html', 640, 900);
	});
	$('#topoView').load('json/connection.json', function(response, status){
	    if(status == "success"){
			$.closePop('loadingPop');
			viewPop(response);
		}else{
		    $.popupEle('loadingPop');
		}
	});
	
	function viewPop(response){
	    var list = eval(response.split('&')[0]),
			blocks = eval(response.split('&')[1]),
			htmlText = "",
			conn = "";
		//------------插入元素-------------
		for( var i in blocks){
			var viewstyle = 'left:'+blocks[i].BlockX+'px;top:'+blocks[i].BlockY+'px;',
				viewid = blocks[i].BlockId,
				viewClass = blocks[i].BlockClass,
				viewsrc = blocks[i].BlockImg,
				viewTxt = blocks[i].BlockText;
			htmlText = htmlText + '<div class="elebox cursor_default '+viewClass+'" id='+viewid+' style='+viewstyle+'><img src='+viewsrc+'><span class="dragPoint cursor_default">'+viewTxt+'</span></div>';
		};
		$('#topoView').html(htmlText);
		
		//------------默认连接-------------
		var instanceView = jsPlumb.getInstance({
				Endpoint : ["Dot", {radius:2}],
				ConnectionOverlays : [
					[ "Arrow", {location: 1, id:"arrow", length:10, foldback:0.8, width: 10} ],
					[ "Label", { label:"关系", id:"label", cssClass:"labelstyle" }]
				],
				Container:"topoView"
			});
		window.jsp = instanceView;
		var windows = jsPlumb.getSelector("#topoView .elebox");
		instanceView.doWhileSuspended(function() {
			var isFilterSupported = instanceView.isDragFilterSupported();
			if (isFilterSupported) {
				instanceView.makeSource(windows, {filter:'none',anchor:"Continuous"}, pstyle);
			}else {
				var eps = jsPlumb.getSelector(".elebox");
				for (var i = 0; i < eps.length; i++) {
					var e = eps[i], p = e.parentNode;
					instanceView.makeSource(e, {parent:p,anchor:"Continuous"}, pstyle);
				}
			}
		});
		instanceView.makeTarget(windows, {anchor:"Continuous"}, pstyle);
		
		//------------更改样式-------------
		for( var i in list){
			var conor = instanceView.connect({ source: list[i].PageSourceId, target:list[i].PageTargetId});
			conor.getOverlay("label").setLabel(list[i].connectionLabel);
			conor.setPaintStyle({fillStyle : list[i].lineColor, strokeStyle: list[i].lineColor});
		};
	}
	//-------------------预览(end)-------------------

	
	//----------------单击显示隐藏(start)-----------------
	$("div[name='box']").click(function(){
		$(this).next().toggle("slow");
	});
	//----------------单击显示隐藏(end)-------------------
	
	//-------------------清屏(end)-------------------
	
	/*$(".hide01").click(function(){
			$("#lefticon01").toggle("slow");
		});
	$(".hide02").click(function(){
		$("#lefticon02").toggle("slow");
	});*/

});


